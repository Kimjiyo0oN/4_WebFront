/* 속성 값을 기준으로 선택 */
a[href="https://www.yalco.kr"] {
  color: #ff4e00;
  font-weight: bold;
}

/* 특정 속성이 있는 요소 선택 */
input[disabled]+label {
  color: lightgray;
  text-decoration: line-through;
}

/* 속성값이 특정 텍스트를 포함하는 요소 */
span[class*="item"] {
  text-decoration: underline;
}

/* 속성값이 특정 텍스트로 시작하는 요소 */
span[class^="fruit"] {
  color: tomato;
}
span[class^="vege"] {
  color: olivedrab;
}

/* 속성값이 특정 텍스트로 끝나는 요소 */
span[class$="-1"] {
  font-weight: bold;
}

/* 마우스오버 */
a:hover {
  background-color: yellow;
}
/* 클릭중 */
a:active {
  background-color: aqua;
}

/* 체크된 것 */
input[type=radio]:checked+label {
  color: tomato;
  font-weight: bold;
}
/* 활성화된 것 */
input[type=radio]:enabled+label {
  text-decoration: underline;
}
/* 비활성화된 것 */
input[type=radio]:disabled+label {
  color: lightgray;
  text-decoration: line-through;
}
/* 인풋 등이 클릭되어 포커스된(입력을 받는) 상태 */
input[type="text"]:focus {
  /* border 밖의 선 (박스 요소가 아님) */
  outline: 2px solid dodgerblue;
}
/* 필수 입력요소 */
input:required {
  border-color: orangered;
}
/* 값이 유효한 입력요소 */
input[type="email"]:valid {
  border-color: green;
}
/* 값이 무효한 입력요소 */
input[type="email"]:not(:valid) {
  border-color: purple;
}

[class*="focus"]:focus {
  outline: 2px solid deeppink;
}
.tab-focus:focus,
.no-focus:focus {
  outline: none;
}
/* 탭으로 포커스된 요소에 적용 */
/* 브라우저 지원 확인 */
[class*="tab-focus"]:focus-visible {
  outline: 2px solid dodgerblue;
}
/* 부모 요소 내 첫 번째 ~요소 */
b:first-of-type {
  text-decoration: overline;
}
/* 부모 요소 내 마지막 ~요소 */
i:last-of-type {
  text-decoration: line-through;
}
/* 부모 요소 내 N번째 ~요소 */
b:nth-of-type(2) {
  text-decoration: underline;
}

/* 부모 요소 내 유일한 ~요소 */
div :only-of-type {
  text-decoration: overline line-through underline;
}
/* 부모 요소 내 종류 무관 유일한 요소 (독자) */
div :only-child {
  text-decoration: wavy underline tomato;
}

li.later::after {
  content: '다음 강좌';
  margin-left: 0.6em;
  padding: 0.16em 0.36em;
  font-size: 0.72em;
  font-weight: bold;
  color: white;
  background-color: darkmagenta;
  border-radius: 0.2em;
}

/* 바로 앞에 가상의 요소 추가 */
li::before {
  content: '';
  display: inline-block;
  margin: 0 0.4em;
  width: 0.8em;
  height: 0.8em;
  background-image: url(./check.png);
  background-size: contain;
}

/* 선택 영역 가상 요소 */
.orange::selection {
  background-color: orange;
}
.dark::selection {
  color: lightgreen;
  background-color: #222;
}

/* 플레이스홀더 가상 요소 */
input:required::placeholder {
  color: darkred;
  background-color: yellow;
}

/* 클래스 선택지 */
.intro {
  background-color: yellow;
}

/*id 선택자*/
#container {
  background: #ff6a00;
  width: 400px;
  height: 200px;
  margin:0 auto;
}

.margin{
  margin:50px; /* 네 방향 마진 모두 50px */
  margin:30px 50px; /* 위아래 마진-30px, 좌우 마진-50px */
  margin:30px 20px 50px; /* 위 마진-30px, 좌우 마진-20px, 아래 마진-50px */
  margin:30px 50px 30px 50px; /* 위 마진-30px, 우 마진-50px, 아래 마진-30px, 좌 마진-50px */
}

.padding{
  padding:10px; /* 모든 방향 패딩 10px */
  padding:10px 30px; /* 위아래 패딩-10px, 좌우 패딩-30px */
  padding:10px 30px 10px 30px; /* 위 패딩-10px, 우 패딩-30px, 아래 패딩-10px, 좌 패딩-30px */
}

/* 박스 모델의 전체 너비
모던 브라우저 = width 값 + 좌우 padding + 좌우 border
인터넷 익스플로러 6 = width 값
(인터넷 익스플로러6의 경우 width값에 패딩과 테두리가 모두 포함된 값이다)
*/

12-1 연결 선택자
하위 선택자 - 지정한 모든 하위 요소에 스타일 적용하기
자식 선택자 - 자식 요소에만 스타일 적용하기
인접 형제 선택자 - 가장 가까운 형제 요소에 스타일 적용하기
형제 선택자 - 형제 요소에 스타일 적용하기
12-2 속성 선택자
[속성] 선택자 - 지정한 속성에 스타일 적용하기
[속성 = 값] 선택자 - 특정 값을 갖는 속성에 스타일 적용하기
[속성 ~= 값] 선택자 - 여러 값 중 특정 값이 포함된 속성에 스타일 적용하기
[속성 |= 값] 선택자 - 특정 값이 포함된 속성에 스타일 적용하기
[속성 ^= 값] 선택자 - 특정 값으로 시작하는 속성에 스타일 적용하기
[속성 $= 값] 선택자 - 특정 값으로 끝나는 속성에 스타일 적용하기
[속성 *= 값] 선택자 - 값의 일부가 일치하는 속성에 스타일 적용하기
12-3 가상 클래스와 가상 요소
사용자 동작에 반응하는 가상 클래스
UI 요소 상태에 따른 가상 클래스
구조 가상 클래스
그 외 가상 클래스
가상 요소

하위 선택자 - 지정한 모든 하위 요소에 스타일 적용하기
/* 상위요소 하위요소 */
section p { color: blue; }
/* section 요소 안에 있는 모든 p 요소의 글자 색을 파란색으로 지정한다. */

자식 선택자 - 자식 요소에만 스타일 적용하기
/* 부모요소 > 자식요소 */
section > p { color: blue; }
/* section 요소 안에 포함된 p요소 중 자식 p 요소에만 글자 색을 파란색으로 지정한다.(손자 요소는 적용하지 않는다.) */

인접 형제 선택자 - 가장 가까운 형제 요소에 스타일 적용하기
/* 요소1 + 요소2 */
h1 + p { text-decoration: underline; }
/* h1 요소 다음에 오는 p요소들 중 첫 번째 p 요소에만 밑줄을 긋는다. */

형제 선택자 - 형제 요소에 스타일 적용하기
/* 요소1 ~ 요소2 */
h1 ~ p { text-decoration: underline; }
/* h1 요소 다음에 오는 모든 형제 p 요소에 밑줄을 긋는다. */

[속성] 선택자 - 지정한 속성에 스타일 적용하기
/* <a> 태그 중 href라는 속성이 있는 요소를 찾아내 배경색 지정. */
a[href] {
  background: yellow;
}

[속성 = 값] 선택자 - 특정 값을 갖는 속성에 스타일 적용하기
/* <a> 태그 중 target속성의 값이 _blank인 링크를 찾아 newwindow.png라는 배경 이미지 표시. */
a[target="_blank"] {
  padding-right: 30px;
  background:url(images/newwindow.png) no-repeat center right;
}

[속성 ~= 값] 선택자 - 여러 값 중 특정 값이 포함된 속성에 스타일 적용하기
/* class 속성 값에 button이 포함된 요소에 스타일 적용. */
[class ~="button"] {
  border: 2px solid black;
  box-shadow: rgba(0,0,0,0.4) 5px 5px;
}

[속성 |= 값] 선택자 - 특정 값이 포함된 속성에 스타일 적용하기
[속성 ~= 값]이랑 헷갈릴 수 있지만 [속성 ~= 값]은 하이픈(-)으로 연결한 단어에 스타일을 적용하지 않는 반면, [속성 |= 값]선택자는 속성 값이 지정한 값이거나 "값-"으로 시작하면 스타일을 적용한다. 다시 말해 하이픈(-)으로 연결한 단어가 있더라도 스타일을 적용한다.
/* <a> 태그 중 title 속성 값에 us이 포함된 요소에 스타일 적용. us-english같이 하이픈(-)으로 연결한 단어도 적용. */
a[title |="us"] {
  background: url(images/us.png) no-repeat left center;
  padding: 5px 25px;
}

/* <a> 태그 중 title 속성 값에 jp이 포함된 요소에 스타일 적용. */
a[title |="jap"\ {
  background: url(images/jp.png) no-repeat left center;
  padding: 5px 25px;
}

[속성 ^= 값] 선택자 - 특정 값으로 시작하는 속성에 스타일 적용하기
/* <a> 태그 중 title="english"에 스타일 적용 */
a[title ^="eng"] {
  background: url(images/us.png) no-repeat left center;
  padding: 5px 25px;
}

[속성 $= 값] 선택자 - 특정 값으로 끝나는 속성에 스타일 적용하기
선택자는 지정한 값으로 끝나는 요소를 찾아 스타일을 적용한다.
/* <a> 태그 중 href="intro.hwp"에 스타일 적용 */
a[href $= "hwp"] {
  background: url(images/hwp_icon.gif) center right no-repeat; /* 배경으로 hwp 아이콘 표시 */
  padding-right: 25px;
}

/* <a> 태그 중 href="intro.xls"에 스타일 적용 */
a[href $= "xls"] {
  background: url(images/excel_icon.gif) center right no-repeat;
  padding-right: 25px;
}

[속성 *= 값] 선택자 - 값의 일부가 일치하는 속성에 스타일 적용하기
어느 위치에든 해당 값이 포함되어 있으면 스타일이 적용된다.
/* href 속성 값에 w3라는 값이 포함되면 스타일 적용 */
[href *= "w3"] {
  background:blue;
  color:white;         
}


사용자 동작에 반응하는 가상 클래스(pseudo class)
사용자가 웹 요소를 클릭하거나 마우스 커서를 올려놓는 등 특정 동작을 할 때 스타일이 바뀌도록 만들고 싶다면 가상 클래스 선택자를 사용한다.

1.:link 가상 클래스 선택자 - 방문하지 않은 링크에 스타일 적용
2.:visited 가상 클래스 선택자 - 방문한 링크에 스타일 적용
3.:hover 가상 클래스 선택자 - 웹 요소에 마우스 커서를 올려놓을 때의 스타일 적용
4.:active 가상 클래스 선택자 - 웹 요소를 활성화했을 때의 스타일 적용
5.:focus 가상 클래스 선택자 - 웹 요소에 초점이 맞추어졌을 때의 스타일 적용
가상 선택자를 링크와 관련해 사용할 때는 선택자 순서에 주의해야 한다. 1~5 순서가 바뀌면 스타일을 정의하더라도 제대로 적용되지 않는다

CSS 포지셔닝과 주요 속성들
CSS 포지셔닝이란?
CSS를 이용해 꾸미고 CSS 포지셔닝을 이용해 검색 창, 로그인 창, 광고, 뉴스, 실시간 검색 순위 등 여러 요소를 적절히 배치하면 지금 우리가 보고 있는 형태로 바뀐다.

브라우저 화면 안에 각 콘텐츠 영역을 어떻게 배치할지를 결정하는 것이 지금부터 배울 float 속성과 position 속성이다.

box-sizing 속성 - 박스 너비 기준 정하기
속성 값
content-box : width 속성 값을 콘텐츠 영역 너비 값으로 사용한다. 기본 값.
border-box : width 속성 값을 콘텐츠 영역에 테두리까지 포함한 박스 모델 전체 너비 값으로 사용한다.

.box1 { /* 콘텐츠 영역 너비 width 300 + padding 30*2 + border 2*2 = 364px가 실제 화면에서 차지하는 너비 */
  box-sizing:content-box;
  width: 300px;
  height: 150px;
  margin: 10px;
  padding: 30px;
  border:2px solid red;
}
.box2 { /* 화면에서 차지하는 너비는 width 300px, 콘텐츠 영역 너비는 width 300 - padding 30*2 - border 2*2 = 236px */
  box-sizing:border-box;
  width: 300px;
  height: 150px;
  margin: 10px;
  padding: 30px;
  border: 2px solid red;
}

position 속성을 통해 문서 상에 요소를 배치하는 방법을 지정한다.
top, right, bottom, left 속성을 통해 요소의 최종 위치를 결정한다.
사용법은 간단하다.
기준을 잡는다. (예- position: relative;)
이동시킨다. (예- top: 50px;)

1. Position 속성
요소를 옮기려면 일단 위치를 옮길 기준점을 잡는다.

값	의미
static	기준 없음 (배치 불가능 / 기본값)
relative	요소 자기 자신을 기준으로 배치
absolute	부모(조상) 요소를 기준으로 배치
fixed	뷰포트 기준으로 배치
stickey	스크롤 영역 기준으로 배치

1-1. Relative
요소를 일반적인 문서 흐름에 따라 배치한다.

요소 자기 자신의 원래 위치(static일 때의 위치)를 기준으로 배치한다.

원래 위치를 기준으로 위쪽(top), 아래쪽(bottom), 왼쪽(left), 오른쪽(right)에서 얼마만큼 떨어질 지 결정한다.
위치를 이동하면서 다른 요소에 영향을 주지 않는다.
문서 상 원래 위치가 그대로 유지된다.


1-2. Absolute
요소를 일반적인 문서 흐름에서 제거한다.

가장 가까운 위치에 있는 조상 요소를 기준으로 배치한다.

조상 요소 위치를 기준으로 위쪽(top), 아래쪽(bottom), 왼쪽(left), 오른쪽(right)에서 얼마만큼 떨어질 지 결정한다.
조상 중 Position을 가진 요소가 없다면 초기 컨테이닝 블록(<body>요소)를 기준으로 삼는다. (static을 제외한 값)
문서 상 원래 위치를 잃어버린다. (아래에 있는 div가 해당 자리를 차지한다)